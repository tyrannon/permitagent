// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// CORE ENTITIES
// ============================================

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  passwordHash      String
  firstName         String
  lastName          String
  phone             String?
  title             String?
  isActive          Boolean           @default(true)
  emailVerified     Boolean           @default(false)
  lastLogin         DateTime?
  preferences       Json              @default("{}")
  
  // Relations
  roleId            String
  role              Role              @relation(fields: [roleId], references: [id])
  departmentId      String?
  department        Department?       @relation(fields: [departmentId], references: [id])
  
  // Owned records
  createdPermits    Permit[]          @relation("PermitCreator")
  assignedPermits   Permit[]          @relation("PermitAssignee")
  workflowEvents    WorkflowEvent[]
  inspections       Inspection[]      @relation("Inspector")
  comments          Comment[]
  notifications     Notification[]
  auditLogs         AuditLog[]        @relation("AuditUser")
  sessions          Session[]
  uploadedDocuments Document[]
  reviews           Review[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([email])
  @@index([departmentId])
  @@index([roleId])
}

model Session {
  id                String            @id @default(cuid())
  token             String            @unique
  refreshToken      String            @unique
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  expiresAt         DateTime
  createdAt         DateTime          @default(now())
  
  @@index([token])
  @@index([userId])
}

model Role {
  id                String            @id @default(cuid())
  name              String            @unique
  description       String?
  permissions       Json              // Array of permission strings
  isSystem          Boolean           @default(false)
  
  users             User[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Department {
  id                String            @id @default(cuid())
  name              String
  code              String            @unique
  description       String?
  email             String?
  phone             String?
  routingRules      Json              @default("{}")
  
  users             User[]
  permitTypes       PermitType[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([code])
}

// ============================================
// PROJECT & PERMIT ENTITIES
// ============================================

model Project {
  id                String            @id @default(cuid())
  projectNumber     String            @unique
  name              String
  description       String?
  
  // Address
  address           String
  city              String
  state             String
  zipCode           String
  parcelNumber      String?
  latitude          Float?
  longitude         Float?
  
  // Valuation
  totalValuation    Decimal           @db.Decimal(12, 2)
  
  // Relations
  organizationId    String?
  organization      Organization?     @relation(fields: [organizationId], references: [id])
  
  permits           Permit[]
  documents         Document[]        @relation("ProjectDocuments")
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([projectNumber])
  @@index([organizationId])
  @@index([parcelNumber])
}

model Organization {
  id                String            @id @default(cuid())
  name              String
  type              OrganizationType
  licenseNumber     String?
  licenseExpiry     DateTime?
  insuranceNumber   String?
  insuranceExpiry   DateTime?
  taxId             String?
  
  // Contact
  email             String
  phone             String
  address           String?
  city              String?
  state             String?
  zipCode           String?
  
  // Relations
  contacts          Contact[]
  projects          Project[]
  permits           Permit[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([type])
  @@index([licenseNumber])
}

model Contact {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  email             String
  phone             String?
  isPrimary         Boolean           @default(false)
  
  organizationId    String
  organization      Organization      @relation(fields: [organizationId], references: [id])
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([organizationId])
  @@index([email])
}

model PermitType {
  id                String            @id @default(cuid())
  name              String
  code              String            @unique
  category          String
  description       String?
  
  // Configuration
  workflowTemplate  Json              // Workflow steps configuration
  requiredFields    Json              // Required field definitions
  dynamicFields     Json              // Custom field definitions
  feeSchedule       Json              // Fee calculation rules
  reviewChecklist   Json              // Review requirements
  
  // Processing times (in days)
  estimatedDays     Int               @default(30)
  expeditedDays     Int               @default(10)
  
  // Relations
  departmentId      String
  department        Department        @relation(fields: [departmentId], references: [id])
  permits           Permit[]
  
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([code])
  @@index([category])
  @@index([departmentId])
}

model Permit {
  id                String            @id @default(cuid())
  permitNumber      String            @unique
  status            PermitStatus      @default(DRAFT)
  priority          Priority          @default(NORMAL)
  
  // Type and configuration
  permitTypeId      String
  permitType        PermitType        @relation(fields: [permitTypeId], references: [id])
  
  // Dynamic data
  formData          Json              // All form fields including dynamic ones
  customFields      Json              @default("{}")
  
  // Project linkage
  projectId         String
  project           Project           @relation(fields: [projectId], references: [id])
  
  // Organization/Applicant
  organizationId    String?
  organization      Organization?     @relation(fields: [organizationId], references: [id])
  applicantName     String
  applicantEmail    String
  applicantPhone    String
  
  // Assignment
  createdById       String
  createdBy         User              @relation("PermitCreator", fields: [createdById], references: [id])
  assignedToId      String?
  assignedTo        User?             @relation("PermitAssignee", fields: [assignedToId], references: [id])
  
  // Dates
  submittedAt       DateTime?
  approvedAt        DateTime?
  issuedAt          DateTime?
  expiresAt         DateTime?
  completedAt       DateTime?
  
  // AI Fields
  aiSummary         String?
  aiRiskScore       Float?
  aiExtractedData   Json?
  aiSuggestions     Json?
  
  // Relations
  documents         Document[]
  workflowEvents    WorkflowEvent[]
  fees              Fee[]
  payments          Payment[]
  inspections       Inspection[]
  comments          Comment[]
  reviews           Review[]
  conditions        Condition[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([permitNumber])
  @@index([status])
  @@index([projectId])
  @@index([organizationId])
  @@index([createdById])
  @@index([assignedToId])
  @@index([permitTypeId])
  @@index([submittedAt])
}

// ============================================
// WORKFLOW & PROCESSING
// ============================================

model WorkflowEvent {
  id                String            @id @default(cuid())
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  action            String
  fromStatus        String?
  toStatus          String?
  comment           String?
  metadata          Json?
  
  // Who performed the action
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])
  
  // AI action tracking
  isAiAction        Boolean           @default(false)
  aiModel           String?
  aiConfidence      Float?
  
  createdAt         DateTime          @default(now())
  
  @@index([permitId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Review {
  id                String            @id @default(cuid())
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  type              ReviewType
  status            ReviewStatus
  checklist         Json              // Review items
  comments          String?
  
  reviewerId        String
  reviewer          User              @relation(fields: [reviewerId], references: [id])
  
  startedAt         DateTime          @default(now())
  completedAt       DateTime?
  
  @@index([permitId])
  @@index([reviewerId])
  @@index([type])
}

model Condition {
  id                String            @id @default(cuid())
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  type              ConditionType
  description       String
  isSatisfied       Boolean           @default(false)
  satisfiedAt       DateTime?
  
  createdAt         DateTime          @default(now())
  
  @@index([permitId])
}

// ============================================
// DOCUMENTS & MEDIA
// ============================================

model Document {
  id                String            @id @default(cuid())
  filename          String
  originalName      String
  mimeType          String
  size              Int
  storageKey        String            // MinIO/S3 key
  
  // Relations
  permitId          String?
  permit            Permit?           @relation(fields: [permitId], references: [id])
  projectId         String?
  project           Project?          @relation("ProjectDocuments", fields: [projectId], references: [id])
  
  // Document type and metadata
  documentType      String
  metadata          Json?
  
  // OCR and extraction
  ocrText           String?
  ocrProcessedAt    DateTime?
  extractedFields   Json?
  
  // AI Analysis
  aiAnalysis        Json?
  aiProcessedAt     DateTime?
  validationStatus  ValidationStatus  @default(PENDING)
  validationErrors  Json?
  
  // Upload info
  uploadedById      String
  uploadedBy        User              @relation(fields: [uploadedById], references: [id])
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([permitId])
  @@index([projectId])
  @@index([documentType])
  @@index([uploadedById])
}

// ============================================
// INSPECTIONS
// ============================================

model Inspection {
  id                String            @id @default(cuid())
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  type              String
  status            InspectionStatus  @default(SCHEDULED)
  
  // Scheduling
  scheduledDate     DateTime
  scheduledTime     String?           // Time window
  
  // Inspector assignment
  inspectorId       String?
  inspector         User?             @relation("Inspector", fields: [inspectorId], references: [id])
  
  // Location for stop-based routing
  address           String
  latitude          Float?
  longitude         Float?
  stopOrder         Int?              // Order in inspector's route
  
  // Results
  result            InspectionResult?
  comments          String?
  photos            Json?             // Array of document IDs
  completedAt       DateTime?
  
  // Reinspection
  requiresReinspection Boolean        @default(false)
  reinspectionOf    String?          // ID of previous inspection
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([permitId])
  @@index([inspectorId])
  @@index([scheduledDate])
  @@index([status])
}

// ============================================
// FEES & PAYMENTS
// ============================================

model Fee {
  id                String            @id @default(cuid())
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  type              String
  description       String
  amount            Decimal           @db.Decimal(10, 2)
  
  // Fee versioning
  feeScheduleVersion String
  calculationDetails Json?
  
  // Status
  isPaid            Boolean           @default(false)
  isWaived          Boolean           @default(false)
  waivedReason      String?
  
  payments          Payment[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([permitId])
  @@index([type])
}

model Payment {
  id                String            @id @default(cuid())
  feeId             String
  fee               Fee               @relation(fields: [feeId], references: [id])
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  amount            Decimal           @db.Decimal(10, 2)
  method            PaymentMethod
  status            PaymentStatus
  
  // External payment info
  transactionId     String?
  processorResponse Json?
  
  paidBy            String            // Name or email
  paidAt            DateTime          @default(now())
  
  // Refund info
  refundedAmount    Decimal?          @db.Decimal(10, 2)
  refundedAt        DateTime?
  refundReason      String?
  
  @@index([feeId])
  @@index([permitId])
  @@index([transactionId])
}

// ============================================
// COMMUNICATION
// ============================================

model Comment {
  id                String            @id @default(cuid())
  permitId          String
  permit            Permit            @relation(fields: [permitId], references: [id])
  
  text              String
  isInternal        Boolean           @default(false)
  
  authorId          String
  author            User              @relation(fields: [authorId], references: [id])
  
  attachments       Json?             // Array of document IDs
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([permitId])
  @@index([authorId])
}

model Notification {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  
  type              NotificationType
  channel           NotificationChannel
  
  subject           String
  body              String
  metadata          Json?
  
  // Status
  status            NotificationStatus @default(PENDING)
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  error             String?
  
  createdAt         DateTime          @default(now())
  
  @@index([userId])
  @@index([status])
  @@index([type])
}

// ============================================
// SYSTEM & AUDIT
// ============================================

model AuditLog {
  id                String            @id @default(cuid())
  
  userId            String?
  user              User?             @relation("AuditUser", fields: [userId], references: [id])
  
  action            String
  entityType        String
  entityId          String
  
  changes           Json?             // Before/after values
  metadata          Json?
  ipAddress         String?
  userAgent         String?
  
  createdAt         DateTime          @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

model SystemSetting {
  id                String            @id @default(cuid())
  key               String            @unique
  value             Json
  description       String?
  isPublic          Boolean           @default(false)
  
  updatedAt         DateTime          @updatedAt
  
  @@index([key])
}

// ============================================
// ENUMS
// ============================================

enum OrganizationType {
  CONTRACTOR
  ARCHITECT
  ENGINEER
  OWNER
  AGENT
  OTHER
}

enum PermitStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  PENDING_INFO
  APPROVED
  ISSUED
  INSPECTIONS
  FINAL_INSPECTION
  CLOSED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReviewType {
  PLANNING
  BUILDING
  FIRE
  PUBLIC_WORKS
  ENVIRONMENTAL
  HEALTH
  TRAFFIC
  OTHER
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  APPROVED_WITH_CONDITIONS
  REJECTED
  ON_HOLD
}

enum ConditionType {
  PRE_ISSUANCE
  POST_ISSUANCE
  FINAL
}

enum ValidationStatus {
  PENDING
  VALID
  INVALID
  WARNING
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum InspectionResult {
  PASSED
  FAILED
  PARTIAL
  NOT_READY
}

enum PaymentMethod {
  CREDIT_CARD
  ACH
  CHECK
  CASH
  WAIVED
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  PERMIT_SUBMITTED
  PERMIT_APPROVED
  PERMIT_REJECTED
  PAYMENT_DUE
  INSPECTION_SCHEDULED
  DOCUMENT_REQUIRED
  STATUS_CHANGE
  COMMENT_ADDED
  OTHER
}

enum NotificationChannel {
  EMAIL
  SMS
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}